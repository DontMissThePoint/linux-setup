" Last change:	2022 Mar 21

"{{{ BACKUP
set backupdir=.backup/,~/.backup/,/tmp//
set directory=.swp/,~/.swp/,/tmp//
set undodir=.undo/,~/.undo/,/tmp//
set hidden

let g:auto_save        = 1
let g:auto_save_silent = 1
let g:auto_save_events = ["InsertLeave", "TextChanged", "FocusLost"]
"}}}

"{{{ ICON
" loading the plugin
let g:webdevicons_enable = 1

" add to start screen
let g:webdevicons_enable_startify = 1
let g:startify_disable_at_vimenter = 1

" use double-width(1) or single-width(0) glyphs
let g:WebDevIconsUnicodeGlyphDoubleWidth = 0

" Can be enabled or disabled
let g:webdevicons_enable_nerdtree = 1
let g:webdevicons_conceal_nerdtree_brackets = 1

" Enable folder/directory glyph flag
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:WebDevIconsEnableFoldersOpenClose = 1
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1

let g:NERDTreeGitStatusWithFlags = 1
let g:NERDTreeGitStatusNodeColorization = 1
let g:NERDTreeIgnore = ['^node_modules$']

" enable folds
set foldmethod=marker
set foldlevel=20
set foldmarker={{{,}}}
"}}}

"{{{ CHAR
" Dim
hi SpecialKey ctermfg=gray guifg=gray80
hi NonText ctermfg=gray guifg=gray70

set list
set listchars=tab:‚ñ∏‚Äî,extends:¬ª,precedes:¬´
set whichwrap+=<,>,[,],h,l
set showbreak=‚Ü™
set nocursorline
set nowrapscan

" Hide cursor line on inactive windows
augroup MyCursorLineGroup
  autocmd!
  au WinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup end

" Trailing whitespace
" except in insert mode
augroup trailing
  au!
  au VimEnter * :set listchars+=trail:‚ê£
  au VimLeave * :set listchars-=trail:‚ê£
  au InsertEnter * :set listchars-=trail:‚ê£
  au InsertLeave * :set listchars+=trail:‚ê£
augroup END

" Show @@@ in the last line if it is truncated
set display=truncate

" Blank slate
set shm+=I

" 24-bit true color
" The "^[" is a single character. Ctrl+v and then ESC
set t_8f=[38;2;%lu;%lu;%lum
set t_8b=[48;2;%lu;%lu;%lum
set termguicolors

" Show context around the cursor
set scrolloff=1
"}}}

"{{{ LINE
" Put these in an autocmd group, so that you can revert them with:
" ":augroup vimStartup | au! | augroup END"
augroup vimStartup
  au!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid, when inside an event handler
  " (happens when dropping a file on gvim) and for a commit message (it's
  " likely a different one than last time).
  autocmd BufReadPost *
        \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
        \ |   exe "normal! g`\""
        \ | endif
augroup END

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
" Revert with: ":delcommand DiffOrig".
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
        \ | wincmd p | diffthis
endif

" Datasets
au BufNewFile,BufRead *.tsv set filetype=tsv

" Fullscreen for datasets
autocmd Syntax *\(^tsv\)\@<! silent! !wmctrl -r ':ACTIVE:' -b add,fullscreen

" cursors
let g:togglecursor_force = 'xterm'

" status
if has_key(environ(), 'TMUX')
  augroup TmuxStatusToggle
    autocmd VimEnter,BufEnter,VimResume * silent !tmux setw status off
    autocmd VimLeave,VimSuspend * silent !tmux setw status on
  augroup END
endif
"}}}

"{{{ PLUGIN

" FZF
" Customize fzf colors to match your color scheme
" - fzf#wrap translates this to a set of `--color` options
let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

" Enable per-command history
" - History files will be stored in the specified directory
" - When set, CTRL-N and CTRL-P will be bound to 'next-history' and
"   'previous-history' instead of 'down' and 'up'.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" fzf tmux popup window
if exists('$TMUX')
  let g:fzf_layout = { 'tmux': '-p90%,60%' }
else
  let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
endif

" Preview window is hidden by default. You can toggle it with ctrl-/.
" 50% , but if the width is smaller
" than 70 columns, it will show above the candidate list
let g:fzf_preview_window = ['right,70%,<70(up,80%)', 'ctrl-/']

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always
      \ --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

" Global line completion (not just open buffers. ripgrep required.)
inoremap <expr> <c-x><c-l> fzf#vim#complete(fzf#wrap({
      \ 'prefix': '^.*$',
      \ 'source': 'rg -n ^ --color always',
      \ 'options': '--ansi --delimiter : --nth 3..',
      \ 'reducer': { lines -> join(split(lines[0], ':\zs')[2:], '') }}))

" Hide statusline
autocmd! FileType fzf set laststatus=0 noshowmode noruler
      \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

" seoul256
let g:seoul256_srgb = 1

" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

" Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'

" Default: 0.5
let g:limelight_default_coefficient = 0.7

" Number of preceding/following paragraphs to include (default: 0)
let g:limelight_paragraph_span = 1

" Beginning/end of paragraph
"   When there's no empty line between the paragraphs
"   and each paragraph starts with indentation
let g:limelight_bop = '^\s'
let g:limelight_eop = '\ze\n^\s'

" Highlighting priority (default: 10)
"   Set it to -1 not to overrule hlsearch
let g:limelight_priority = -1

autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" Sneak
let g:sneak#label = 1
let g:sneak#s_next = 0
let g:sneak#use_ic_scs = 1
let g:sneak#prompt = 'üéØ'
let g:sneak#target_labels = "sftunq/;SFGHLTUNRMQZ?0"

" Rainbow
let g:rainbow_active = 1 "set to 0 if you want to enable it later via :RainbowToggle

" IndentLine
let g:indentLine_defaultGroup         = 'SpecialKey'
let g:indentLine_char                 = '‚îÇ'
" let g:indentLine_char_list            = ['‚îÇ', '|', '¬¶', '‚îÜ', '‚îä', '‚ñè']

" disable for syntax
let g:vim_json_conceal=0
let g:markdown_syntax_conceal=0

" YouCompleteMe
augroup load_ycm
  autocmd!
  autocmd CursorMoved * call plug#load('YouCompleteMe', 'YCM-Generator', 'supertab')
                     \| autocmd! load_ycm
augroup END

" compatibility, with the helper of supertab
let g:SuperTabCrMapping                = 0
let g:SuperTabDefaultCompletionType    = '<C-n>'
let g:UltiSnipsExpandTrigger           = '<tab>'
let g:UltiSnipsJumpForwardTrigger      = '<tab>'
let g:UltiSnipsJumpBackwardTrigger     = '<s-tab>'
let g:ycm_key_list_select_completion   = ['<C-j>', '<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<C-p>', '<Up>']
let g:ycm_disable_for_files_larger_than_kb = 2560

" Debug logs: run :YcmDebugInfo to see clangd status
" and :YcmToggleLogs to view clangd‚Äôs debug logs.
let g:ycm_clangd_args = ['-log=verbose', '-pretty']

" Clear YCM blacklist
let g:ycm_filetype_blacklist = {}

" Let clangd fully control code completion
let g:ycm_clangd_uses_ycmd_caching = 0

" Use installed clangd, not YCM-bundled clangd which doesn't get updates.
let g:ycm_clangd_binary_path = exepath("clangd")

" Target for REPL
let g:slime_dont_ask_default = 1
let g:slime_cell_delimiter = "```"
let g:slime_target = "vimterminal"
let g:slime_vimterminal_config = { "term_finish": "close",
      \ "term_name": "R",
      \ "horizontal": 1,
      \ "term_rows": &columns * 1/3,}

" R
autocmd FileType r call ToSlime()
function ToSlime()
  inoremap <C-S-n> %>%<Space>
  " Create new R terminal
  terminal
  " Get terminal buffer number
  let bufnr = term_list()[0]
  " Set Slime to pick terminal
  let g:slime_default_config = {"bufnr": bufnr}
  call term_sendkeys(bufnr, "R --silent\<CR>")
endfunc

"}}}

"{{{ REMAP

" Fzf
nnoremap <Space><Space> :History:<CR>
nnoremap <leader>fe :FZF ~/<CR>

" Indent
nnoremap <leader>idl :IndentLinesToggle<CR>

" Slime
let g:slime_no_mappings = 0
xmap <leader>s <Plug>SlimeRegionSend
nmap <leader>s <Plug>SlimeMotionSend
nmap <leader>ss <Plug>SlimeLineSend

" Command-line
cnoremap q qa
noremap ;; ;
vnoremap ; :
map ; :

" Math
vmap <expr>  ++  VMATH_YankAndAnalyse()

" VimDiff
nmap <F6> :DiffOrig<CR>

" Tags
nnoremap <silent> <F9> :TagbarToggle<CR>

" Functions

nnoremap i :noh<CR>i
nnoremap <silent> <S-r> :nohlsearch<CR><S-r>
nnoremap <silent><leader>1 :source ~/.my.vimrc \| :PlugInstall<CR>

" Toggle list mode quickly
noremap \\ :set invlist<CR>

" toggle background
silent! call github_colors#togglebg_map('<F10>')

" Activate FOCUS mode with F11
nmap <F11> <Cmd>set background=dark <bar> silent! Goyo

" EPIGEN_ADD_BLOCK_COLORSCHEME_GIT {
  " nmap <buffer> <leader>l <Plug>(Limelight)
  " xmap <buffer> <leader>l <Plug>(Limelight)
  " autocmd! VimEnter *\(.tsv\|.csv\)\@<! call SneakStf()
  " function SneakStf()
  "   nnoremap <buffer> S <Plug>Sneak_s
  "   nnoremap <buffer> s <Plug>Sneak_S
  "   nnoremap <buffer> f <Plug>Sneak_s
  "   nnoremap <buffer> F <Plug>Sneak_F
  "   nnoremap <buffer> t <Plug>Sneak_t
  "   nnoremap <buffer> T <Plug>Sneak_T
  "   " focus
  "   set background=dark
  "   silent! Goyo
  " endfunction
  " EPIGEN_ADD_BLOCK_COLORSCHEME_GIT }

  " NetisFleet
  autocmd FileType tsv,tex call DataViz()
  function DataViz()
    let g:airline_theme='papercolor'
    let g:github_colors_soft = 0

    silent! Goyo!
    set background=light
    colo github
    noremap <silent> ,, :source %:p:h/sheet_options.vim<CR>

    func! Swipe(card)
      let @c = a:card
      silent! execute "normal d$:pu c"
      -join!

      " Cursor pos
      call cursor('.',strwidth(getline('.')))
    endfunc

    " Preselect suppliers
    iabbrev <silent> ff <Cmd>:call fzf#run(fzf#wrap({
          \ 'source': readfile(expand('$HOME/.cards.txt')),
          \ 'sink': function('Swipe'), 'window': { 'width': 0.65,
          \ 'height': 0.6, 'highlight': 'Todo', 'border': 'sharp' },
          \ 'options': '+m --header "" --border-label "Select gas station"
          \ --preview "" --prompt "Location	: üí≥ "'}))<CR>

    " Canvas
    setlocal noexpandtab ruler
    setlocal tabstop=20 softtabstop=20 shiftwidth=20

    " Visibility
    setlocal number relativenumber cursorcolumn cursorline
    windo set scrollopt=ver,jump scrollbind nowrap

    " Fast Lane
    call EnableCursorLines()

    " Highlight
    call feedkeys(",a")
  endfunc
  "}}}
